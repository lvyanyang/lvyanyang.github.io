(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{401:function(v,_,t){"use strict";t.r(_);var e=t(25),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"核心工具类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心工具类"}},[v._v("#")]),v._v(" 核心工具类")]),v._v(" "),t("p",[v._v("框架针对项目中使用频率极高的功能函数以静态方法的方式统一封装到"),t("code",[v._v("XCI")]),v._v("类中，方便使用，下面介绍一下常用的函数。")]),v._v(" "),t("h2",{attrs:{id:"字符串类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串类"}},[v._v("#")]),v._v(" 字符串类")]),v._v(" "),t("ul",[t("li",[v._v("cleanHtml 清除Html不安全标签")]),v._v(" "),t("li",[v._v("cleanXss 清除Xss不安全内容")]),v._v(" "),t("li",[v._v("encodeHtml HTML字符转义")]),v._v(" "),t("li",[v._v("decodeHtml  还原被转义的HTML字符")]),v._v(" "),t("li",[v._v("htmlToText  提取html中的文字")]),v._v(" "),t("li",[v._v("format 格式化输出文本")]),v._v(" "),t("li",[v._v("getSpell 获取所给中文的每个汉字首字母组成首字母字符串")]),v._v(" "),t("li",[v._v("getSpell 获取所给中文的每个汉字字母字符串")]),v._v(" "),t("li",[v._v("splitToList 切分字符串到List")]),v._v(" "),t("li",[v._v("splitToArray 切分字符串到数组")]),v._v(" "),t("li",[v._v("replaceEnter 替换字符串中的回车和换行")]),v._v(" "),t("li",[v._v("pathOf 路径拼接")]),v._v(" "),t("li",[v._v("pathOfClean 路径清理")])]),v._v(" "),t("h2",{attrs:{id:"空判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空判断"}},[v._v("#")]),v._v(" 空判断")]),v._v(" "),t("ul",[t("li",[v._v("isEmpty 字符串是否为空，List，Array，Map元素长度0也表示空")]),v._v(" "),t("li",[v._v("isNotEmpty")]),v._v(" "),t("li",[v._v("isBlank 去除掉不可见字符后是否为空")]),v._v(" "),t("li",[v._v("isNotBlank")])]),v._v(" "),t("h2",{attrs:{id:"加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加密"}},[v._v("#")]),v._v(" 加密")]),v._v(" "),t("ul",[t("li",[v._v("fromHex 十六进制字符串转为字节数组")]),v._v(" "),t("li",[v._v("toHex 字节数组转为十六进制字符串")]),v._v(" "),t("li",[v._v("toBase64 将字节码转换成base64文本")]),v._v(" "),t("li",[v._v("toBase64Str 将文本转换成base64文本")]),v._v(" "),t("li",[v._v("fromBase64 将base64转换成字节码")]),v._v(" "),t("li",[v._v("fromBase64Str 将base64转换成文本")]),v._v(" "),t("li",[v._v("encrypt 字符串AES对称加密")]),v._v(" "),t("li",[v._v("decrypt 字符串AES对称解密")])]),v._v(" "),t("h2",{attrs:{id:"逻辑判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑判断"}},[v._v("#")]),v._v(" 逻辑判断")]),v._v(" "),t("ul",[t("li",[v._v("ifBlankAction 对象为空或者空字符串时执行语句")]),v._v(" "),t("li",[v._v("ifNotBlankAction 对象不为空时执行语句")]),v._v(" "),t("li",[v._v("ifNullAction 对象为空时执行语句")]),v._v(" "),t("li",[v._v("ifNotNullAction 对象为空时执行语句")]),v._v(" "),t("li",[v._v("ifTrueAction 测试条件为true时执行语句")]),v._v(" "),t("li",[v._v("ifFalseAction 测试条件为false时执行语句")]),v._v(" "),t("li",[v._v("ifAction 根据测试条件执行语句")])]),v._v(" "),t("h2",{attrs:{id:"id生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#id生成器"}},[v._v("#")]),v._v(" ID生成器")]),v._v(" "),t("ul",[t("li",[v._v("guid 生成普通 Guid")]),v._v(" "),t("li",[v._v("objectId 创建MongoDB ID生成策略实现")]),v._v(" "),t("li",[v._v("nextId 获取新唯一编号（18位数值）")]),v._v(" "),t("li",[v._v("nextIdStr 获取新唯一编号（18位数值）字符串")])]),v._v(" "),t("h2",{attrs:{id:"异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[v._v("#")]),v._v(" 异常处理")]),v._v(" "),t("ul",[t("li",[v._v("ifTrueThrow 如果测试条件为 true,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("ifTrueThrow 如果测试条件为 true,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("ifFalseThrow 如果测试条件为 false,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("ifFalseThrow 如果测试条件为 false,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("ifNullThrow 如果测试对象为null,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("ifNotNullThrow 如果测试对象为null,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("ifBlankThrow 如果测试对象为null或者内容为空,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("ifNotBlankThrow 如果测试对象为null或者内容为空,则抛出应用程序异常")]),v._v(" "),t("li",[v._v("throwException 抛出应用程序异常")])]),v._v(" "),t("p",[v._v("抛出的异常类 "),t("code",[v._v("BusinessException")])]),v._v(" "),t("h2",{attrs:{id:"文件操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件操作"}},[v._v("#")]),v._v(" 文件操作")]),v._v(" "),t("ul",[t("li",[v._v("buildRootFile 构造根目录文件对象")]),v._v(" "),t("li",[v._v("buildRootFilePath 构造根目录文件路径")]),v._v(" "),t("li",[v._v("readFileByMd5 读取文件检测 md5")]),v._v(" "),t("li",[v._v("readFileByMd5 读取文件检测 md5")]),v._v(" "),t("li",[v._v("writeFileByUtf8 写入文件")]),v._v(" "),t("li",[v._v("deleteFile 删除文件")]),v._v(" "),t("li",[v._v("getFileExtName 获得文件的扩展名，扩展名不带.")]),v._v(" "),t("li",[v._v("getFileMainName 返回主文件名")]),v._v(" "),t("li",[v._v("getWebRoot 获取Web项目下的WebRoot路径")])]),v._v(" "),t("h2",{attrs:{id:"日期处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#日期处理"}},[v._v("#")]),v._v(" 日期处理")]),v._v(" "),t("ul",[t("li",[v._v("now()  获取当前日期")]),v._v(" "),t("li",[v._v("formatDate 格式化日期(默认格式yyyy-MM-dd)")]),v._v(" "),t("li",[v._v("formatDateHasMinute 格式化日期字符串(默认格式 yyyy-MM-dd HH:mm)")]),v._v(" "),t("li",[v._v("formatDateTime 格式化日期(默认格式 yyyy-MM-dd HH:mm:ss)")]),v._v(" "),t("li",[v._v("formatTime 获取格式化的时间字符串(默认格式 HH:mm:ss)")]),v._v(" "),t("li",[v._v("formatDate 格式化日期")]),v._v(" "),t("li",[v._v("dateToLocalDateTime 日期对象转为本地日期时间对象")]),v._v(" "),t("li",[v._v("dateToLocalDate 日期对象转为本地日期对象")]),v._v(" "),t("li",[v._v("dateToLocalTime 日期对象转为本地时间对象")]),v._v(" "),t("li",[v._v("localDateToDate 本地日期对象转为日期对象")]),v._v(" "),t("li",[v._v("localDateTimeToDate 本地日期时间对象转为日期对象")]),v._v(" "),t("li",[v._v("localDateTimeToDate 本地日期和本地时间对象转为日期对象")]),v._v(" "),t("li",[v._v("isExpired 测试检测时间是否在指定的开始时间和结束时间之内,精度到毫秒单位,如果不在范围内返回true")])]),v._v(" "),t("h2",{attrs:{id:"集合处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合处理"}},[v._v("#")]),v._v(" 集合处理")]),v._v(" "),t("ul",[t("li",[v._v("updateListItem 更新列表元素")]),v._v(" "),t("li",[v._v("listIndexOf 根据条件获取元素索引号")]),v._v(" "),t("li",[v._v("indexOf 在一个一维数组中搜索指定对象")]),v._v(" "),t("li",[v._v("pageList 列表分页排序")])]),v._v(" "),t("h2",{attrs:{id:"类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[v._v("#")]),v._v(" 类型转换")]),v._v(" "),t("ul",[t("li",[v._v("toChar 转换为字符")]),v._v(" "),t("li",[v._v("toByte 转换为byte")]),v._v(" "),t("li",[v._v("toShort 转换为Short")]),v._v(" "),t("li",[v._v("toNumber 转换为Number")]),v._v(" "),t("li",[v._v("toInt 转换为int")]),v._v(" "),t("li",[v._v("toLong 转换为long")]),v._v(" "),t("li",[v._v("toDouble 转换为double")]),v._v(" "),t("li",[v._v("toFloat 转换为Float")]),v._v(" "),t("li",[v._v("toBool 转换为boolean")]),v._v(" "),t("li",[v._v("toEnum 转换为Enum对象")]),v._v(" "),t("li",[v._v("toBigInteger 转换为BigInteger")]),v._v(" "),t("li",[v._v("toBigDecimal 转换为BigDecimal")]),v._v(" "),t("li",[v._v("toStr 转换为字符串")]),v._v(" "),t("li",[v._v("toIntArray 转换为Integer数组")]),v._v(" "),t("li",[v._v("toLongArray 转换为Long数组")]),v._v(" "),t("li",[v._v("toStrArray 转换为String数组")])]),v._v(" "),t("h2",{attrs:{id:"tree操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tree操作"}},[v._v("#")]),v._v(" Tree操作")]),v._v(" "),t("ul",[t("li",[v._v("buildTreePath 生成路径字符串")]),v._v(" "),t("li",[v._v("buildNewTreePath 获取新建节点排序路径")]),v._v(" "),t("li",[v._v("updateNodeDrag 更新拖拽节点")]),v._v(" "),t("li",[v._v("deleteTree 删除树形结构")]),v._v(" "),t("li",[v._v("buildFilterTreePredicate 动态构建Tree过滤条件")]),v._v(" "),t("li",[v._v("filterTree 树形结构数据过滤(自动关联出结果的所有上级)")]),v._v(" "),t("li",[v._v("getDeleteChildrenIds 获取待删除的主键集合(包含指定Id字符串中所有的下级主键)")]),v._v(" "),t("li",[v._v("getTreeParents 获取指定节点的所有父节点")]),v._v(" "),t("li",[v._v("getTreeChildren 获取指定节点的所有子节点")]),v._v(" "),t("li",[v._v("removeTreeChildren  移除子节点")]),v._v(" "),t("li",[v._v("hasChildren 检查指定节点Id是否存在子节点")])]),v._v(" "),t("h2",{attrs:{id:"json操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json操作"}},[v._v("#")]),v._v(" Json操作")]),v._v(" "),t("ul",[t("li",[v._v("toJsonString 对象转Json字符串")]),v._v(" "),t("li",[v._v("toJsonObject Json字符串转对象")]),v._v(" "),t("li",[v._v("toJsonListObject Json字符串转集合对象")]),v._v(" "),t("li",[v._v("toJsonMapObject Json字符串转Map对象")]),v._v(" "),t("li",[v._v("loadJsonList 加载 Json 文件数据")]),v._v(" "),t("li",[v._v("saveJsonList 保存 Json 文件数据")])]),v._v(" "),t("h2",{attrs:{id:"cookie操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie操作"}},[v._v("#")]),v._v(" Cookie操作")]),v._v(" "),t("ul",[t("li",[v._v("getCookies 获取Cookie数组")]),v._v(" "),t("li",[v._v("getCookie 获取单个Cookie")]),v._v(" "),t("li",[v._v("setCookie 设置 Cookie")]),v._v(" "),t("li",[v._v("removeCookie 删除cookie")])]),v._v(" "),t("h2",{attrs:{id:"jwt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt"}},[v._v("#")]),v._v(" Jwt")]),v._v(" "),t("ul",[t("li",[v._v("createJwt 生成jwt令牌")]),v._v(" "),t("li",[v._v("parseJwt 解析jwt")]),v._v(" "),t("li",[v._v("getTokenId 获取 TokenId")])]),v._v(" "),t("h2",{attrs:{id:"缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[v._v("#")]),v._v(" 缓存")]),v._v(" "),t("ul",[t("li",[v._v("getCacheValue 获取缓存对象值")]),v._v(" "),t("li",[v._v("getCacheValueList 获取缓存对象集合")]),v._v(" "),t("li",[v._v("cacheContains 检查缓存容器中是否存在指定名称的对象")])]),v._v(" "),t("h2",{attrs:{id:"spring容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring容器"}},[v._v("#")]),v._v(" Spring容器")]),v._v(" "),t("ul",[t("li",[v._v("getBean 通过name、class获取Bean对象")]),v._v(" "),t("li",[v._v("getBeansOfTypeList 获取接口实现类集合")]),v._v(" "),t("li",[v._v("getBeansOfType 获取接口实现类Map")]),v._v(" "),t("li",[v._v("containsBean 通过name、class测试Bean对象是否存在，则返回true")]),v._v(" "),t("li",[v._v("isSingleton 判断Bean对象是否是单例")]),v._v(" "),t("li",[v._v("getSpringType 根据名称获取Bean对象类型")]),v._v(" "),t("li",[v._v("getCurrentProxy  获取Aop代理对象")]),v._v(" "),t("li",[v._v("registerBean 主动向Spring容器中注册bean")])]),v._v(" "),t("h2",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[v._v("#")]),v._v(" 其他")]),v._v(" "),t("ul",[t("li",[v._v("startWatch 开始计时监控")]),v._v(" "),t("li",[v._v("stopWatch 停止计时监控")]),v._v(" "),t("li",[v._v("plusEndDateTime 处理结束日期,结束日期增加一天")]),v._v(" "),t("li",[v._v("getDefaultDatabaseId 获取默认数据源的数据库标识符")]),v._v(" "),t("li",[v._v("trimMapValue 去除map中字符串值两边空格")]),v._v(" "),t("li",[v._v("download 文件下载")]),v._v(" "),t("li",[v._v("getRequest 获取Request对象")]),v._v(" "),t("li",[v._v("getResponse 获取Response对象")]),v._v(" "),t("li",[v._v("getSession 获取Session对象")]),v._v(" "),t("li",[v._v("getHostIP 获取服务器IP")]),v._v(" "),t("li",[v._v("getHostName 获取服务器主机名")]),v._v(" "),t("li",[v._v("getClientIP 获取客户端IP")]),v._v(" "),t("li",[v._v("getIPLocation 根据ip地址解析IP地址地理位置")]),v._v(" "),t("li",[v._v("getRequestBrowserOsInfo 获取当前请求浏览器操作系统IP地址信息")]),v._v(" "),t("li",[v._v("forEachIds 分割主键字符串,并进行for循环")]),v._v(" "),t("li",[v._v("buildFilterPredicate 动态构建过滤条件")]),v._v(" "),t("li",[v._v("filterList 过滤列表")])])])}),[],!1,null,null,null);_.default=i.exports}}]);